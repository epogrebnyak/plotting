from xls import get_file_path_in_project_directory
import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
# a duplicate?

import datetime
import numpy as np
# from matplotlib.backends.backend_pdf import PdfPages

START_XLIM = datetime.date(2005,1,1)
END_XLIM   = datetime.date(2016,12,1)

def my_annotation(text, xy_val, position):
    RIGHT_OFFSET = 50
    xy_offset_dict = {'upper': (RIGHT_OFFSET, 5), 'lower':(RIGHT_OFFSET,-5) }
    xytext_val = xy_offset_dict[position]
    plt.annotate(text, xy = xy_val, xytext = xytext_val, textcoords = 'offset points', 
                 ha = 'right', va = 'center', fontsize = 10)
  
def draw_last_point(ts):    
    last_date_value = ts.tail(1)  
    last_date_index = last_date_value.index 
    plt.gca().scatter(last_date_index, last_date_value, s=10)
    point = (last_date_index, last_date_value)
    
    upper_label = datetime.datetime.strftime(last_date_index.date[0], "%m-%Y")
    my_annotation(upper_label, point, "upper")
    
    x = last_date_value.values[0]
    lower_label = int(round(x*100))/100   
    my_annotation(lower_label, point, "lower")   
    
    # plt.annotate("Q1", xy = (last_date, last_date_value), xytext = (16, 5), textcoords = 'offset points', ha = 'right', va = 'center', fontsize = 7)
    # plt.annotate("3.0", xy = (last_date, last_date_value), xytext = (17, -5), textcoords = 'offset points', ha = 'right', va = 'center', fontsize = 7)

def make_page(pagetitle, aspects, linedata, start_date = START_XLIM, end_date = END_XLIM,
              save_file = None):
              
    # A4 landscape
    plt.figure(figsize=(11.7, 8.27), facecolor='white')    
    plt.suptitle(pagetitle, x=.5, y=.98, ha="center", fontsize=18) 

    # change font size
    matplotlib.rc('xtick', labelsize=10)
    matplotlib.rc('ytick', labelsize=10)
    matplotlib.rcParams.update({'font.size': 12})        
    
    # aspects must be a tuple or a list of two values
    nrows = aspects[0]
    ncols = aspects[1]
    
    for i, ts in enumerate(linedata):
        plt.subplot(nrows, ncols, i + 1)        
        
        plt.title(ts["title"], loc = "left")
        plt.grid(b=True, which='both', color='0.65',linestyle=':')
        plt.xlim(start_date, end_date)
        
        plt.plot(ts["data"].index, ts["data"])
        # Note: s["data"].plot() has different behavior other than plt.plot(s["data"].index, s["data"])
        
        draw_last_point(ts["data"]) 
    
    plt.subplots_adjust(left=0.1, right=0.92, top=0.9, bottom=0.07, hspace = .2)
    # See also: http://stackoverflow.com/questions/4042192/reduce-left-and-right-margins-in-matplotlib-plot
    
    if save_file is not None:
            plt.savefig(save_file, format="pdf")    

def read_csv_frame(path):
    df = pd.read_csv(csv_path, index_col = 0)
    # convert index to <class 'pandas.tseries.index.DatetimeIndex'> 
    df.index = pd.to_datetime(df.index)
    return df
     
    

    
if __name__ == "__main__":   
    csv_filename = "sa2_Dbase.csv"
    csv_path = get_file_path_in_project_directory(csv_filename)
    df = read_csv_frame(csv_path)

    fts1 = {  "data": df["SA2_2"]
           , "title": 'Gross Domestic Product'
           ,  "unit": "Four-quarter percentage change" }

    fts2 = {  "data": df["SA2_3"]
           , "title": 'Industrial Production'
           ,  "unit": "Index, 1997=100" }
            
    fts3 = {  "data": df["SA2_4"]
           , "title": 'Unemployment Rate'
           ,  "unit": "Percent" }

    fts4 = {  "data": df["SA2_5"]
           , "title": 'Consumer Price Index'
           ,  "unit": "12-Month Percentage Change" }       
 
    make_page("Summary Indicators", (2,2), [fts1, fts2, fts3, fts4], save_file = "foo.pdf")    
    plt.show()

     


"""
Todo: make graph layout generated by script '4graph.py' more similar 
      picture on global_all 1.pdf' (2015-05-20 03:24 PM)
new:
 -  frame around plot must be solid 
 
done:
 - overall size of figure close to A4 landscape
 - some dotted gridlines       
 - slicing dy start-date / end date
 - overall page title 
 - save single figure to PDF file 
 - warning appears, change code to avoid it
    MatplotlibDeprecationWarning: The use of 0 (which ends up being the _last_ sub-plot) is deprecated in 1.4 and will raise an error in 1.5 mplDeprecation)
 -  figure background = white
 - smaller font on x and Y axis
 - change margins of the figure and spacing between subplots (as in interactive show() menu)
 - last dot value label on graph  
       must plot actual values + subfunction 
 
weaknesses:
 - each graph header/title, (optional) subheader
   see subheader discussion in text   
        #  Subtitle  
        #  Option 1
        #  Subtitle was previously done as text on figure, but it is impractical to calculate 
        #  coordinates inside this function now (option 1)       
        #  plt.figtext(.125,.93,'Gross Domestic Product', fontsize=9, ha='left')
        #  plt.figtext(.125,.91,'Four-quarter percentage change', fontsize=6, ha="left")
        #
        #  Option 2
        #  Another option for subtitle is simply a line break in title string
        #  plt.title("Title" + "\n" + "Subtitle", loc = "left")
        #  A drawback is that font size stays the same for title and subtitle 
        #  Also need to change some margins to make it look right 
  
 - timeline on X axis, years only 
      if line plt.xlim(start_date, end_date) omitted, plots every year
      how can I control tick step frequency in dates format?   
  
not todo:
 - source and date on the bottom
 - line legends
 - bar graph
 - more changes in ticks spacing and grid spacing
    if line plt.xlim(start_date, end_date) omitted tickes are different
 - can one save and reuse parameters of the graph, when 
   changing appearance using controls in a pop-up window?  

 """

# 
# Multiple page PDF  
# 
# from matplotlib.backends.backend_pdf import PdfPages

# 
# Simple drawing example  
# 
# ts = pd.Series(np.random.randn(1000), index=pd.date_range('1/1/2000', periods=1000))
# ts = ts.cumsum()
# ts.plot()
# plt.show()